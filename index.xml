<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Miblog</title>
    <link>https://vyskocil.org/</link>
    <description>Recent content on Miblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Feb 2020 22:24:45 +0100</lastBuildDate>
    
	<atom:link href="https://vyskocil.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testify: make Go testing easy 3/3</title>
      <link>https://vyskocil.org/blog/testify-make-go-testing-easy-3/</link>
      <pubDate>Mon, 03 Feb 2020 22:24:45 +0100</pubDate>
      
      <guid>https://vyskocil.org/blog/testify-make-go-testing-easy-3/</guid>
      <description>While Go comes with go test and a testing package by default, the experience can be better with testify package. Git hub page introduces it as Go code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.
By the end I found the resulting article as too long (~25 minutes) to read, so I split it into
 Part1 introduces assert, talks briefly abot Python and C and shows basics of testify Part2 introduces table driven testing, more helpers like ElementsMatch or JSONeq Part3 gets more advanced with test suited and mocks  Test suites While testing documentation encourages table driven tests and subtests, there are many developers outside, who are used to write Smalltalk like unit tests and this style encourages writing test suites.</description>
    </item>
    
    <item>
      <title>Testify: make Go testing easy 2/3</title>
      <link>https://vyskocil.org/blog/testify-make-go-testing-easy-2/</link>
      <pubDate>Mon, 03 Feb 2020 22:02:59 +0100</pubDate>
      
      <guid>https://vyskocil.org/blog/testify-make-go-testing-easy-2/</guid>
      <description>While Go comes with go test and a testing package by default, the experience can be better with testify package. Git hub page introduces it as Go code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.
By the end I found the resulting article as too long (~25 minutes) to read, so I split it into
 Part1 introduces assert, talks briefly abot Python and C and shows basics of testify Part2 introduces table driven testing, more helpers like ElementsMatch or JSONeq Part3 gets more advanced with test suited and mocks  Table driven testing Table driven testing is common and usefull go idiom.</description>
    </item>
    
    <item>
      <title>Testify: make Go testing easy 1/3</title>
      <link>https://vyskocil.org/blog/testify-make-go-testing-easy/</link>
      <pubDate>Mon, 03 Feb 2020 22:02:55 +0100</pubDate>
      
      <guid>https://vyskocil.org/blog/testify-make-go-testing-easy/</guid>
      <description>While Go comes with go test and a testing package by default, the experience can be better with testify package. Git hub page introduces it as Go code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.
By the end I found the resulting article as too long (~25 minutes) to read, so I split it into
 Part1 introduces assert, talks briefly abot Python and C and shows basics of testify Part2 introduces table driven testing, more helpers like ElementsMatch or JSONeq Part3 gets more advanced with test suited and mocks  Standard approach Example as it comes with a testing package from the standard library.</description>
    </item>
    
    <item>
      <title>Easy way to check go.mod replace via Linux namespaces</title>
      <link>https://vyskocil.org/blog/easy-way-to-check-gomod-replace/</link>
      <pubDate>Mon, 04 Nov 2019 10:26:04 +0100</pubDate>
      
      <guid>https://vyskocil.org/blog/easy-way-to-check-gomod-replace/</guid>
      <description>The common problem for monorepo and go modules is that the following
 It is really easy to miss the go.mod replace directive
 In a following text we will learn more about Linux, namespaces and container technologies like Docker or Podman.
The problem While go build is awesome tool, doing a lot of things in the background has sometimes consequences. And the typical consequences is when we build the software from an environment without network access.</description>
    </item>
    
    <item>
      <title>Kinkip</title>
      <link>https://vyskocil.org/kinkip/</link>
      <pubDate>Mon, 28 Oct 2019 21:55:29 +0100</pubDate>
      
      <guid>https://vyskocil.org/kinkip/</guid>
      <description></description>
    </item>
    
    <item>
      <title>qrget: easy to use privacy oriented cloudless file sharing</title>
      <link>https://vyskocil.org/qrget/</link>
      <pubDate>Thu, 24 Oct 2019 22:25:27 +0200</pubDate>
      
      <guid>https://vyskocil.org/qrget/</guid>
      <description>The Problem How to transfer files from my laptop to my cell phone.

Why is this a problem? Actually there are plenty of solutions there
 Cloud based sharing: Google Disc, Dropbox, (Next|Own)Cloud, old fashioned FTP, SFTP, sending emails, Facebook Messenger, &amp;hellip; Bluetooth NFC USB transfer &amp;hellip;maybe there are more options there &amp;hellip;  The key factor is that except Cloud based methods I would not call others as simple to use.</description>
    </item>
    
    <item>
      <title>Correct Usage of Sql Transaction in Postgres From Go</title>
      <link>https://vyskocil.org/blog/correct-usage-of-sql-transaction-in-postgres-from-go/</link>
      <pubDate>Tue, 21 May 2019 23:02:31 +0200</pubDate>
      
      <guid>https://vyskocil.org/blog/correct-usage-of-sql-transaction-in-postgres-from-go/</guid>
      <description>Problem Once upon a time I got a task to merge duplicate URLs in our production database. It turned out that there were a lot of same urls like https://example.com?fbclid=1234 and https://example.com?fbclid=5678 we wanted to merge. Code to normalize URL was easy to develop. Code to migrate the database looked easy as weel. Until I turned the transaction on. Then very cryptic message appeared
1  pq: unexpected Parse response &amp;#39;C&amp;#39;   The error message was telling me nothing.</description>
    </item>
    
    <item>
      <title>Implement Sql Database Driver in 100 Lines of Go</title>
      <link>https://vyskocil.org/blog/implement-sql-database-driver-in-100-lines-of-go/</link>
      <pubDate>Mon, 18 Feb 2019 22:59:18 +0200</pubDate>
      
      <guid>https://vyskocil.org/blog/implement-sql-database-driver-in-100-lines-of-go/</guid>
      <description>Go database/sql defines interfaces for SQL databases. Actual driver must be implemented in own package. And dependency injection is done as a part of import and build system. Lets go deeper to see how it is actually implemented.
This exercise will result in a simple driver backed up by csv files. Who do not want to SELECT from csv file?
Disclaimer: I wrote it in order to learn database/sql and to learn more about design of APIs for go.</description>
    </item>
    
    <item>
      <title>Speeding Your Ci With Go Mod Download Again</title>
      <link>https://vyskocil.org/blog/speeding-your-ci-with-go-mod-download-again/</link>
      <pubDate>Wed, 13 Feb 2019 22:56:28 +0200</pubDate>
      
      <guid>https://vyskocil.org/blog/speeding-your-ci-with-go-mod-download-again/</guid>
      <description>Running go mod download slows down each CI run a lot. More dependencies increases time and it wastes the bandwidth again and again. As we do use special CI containers for the task, then go modules can be downloaded during container build phase and CI build will benefit from it. There are many articles about this topic. However most of them discuss one go module per repository or Docker image. As I wrote recently, we do use monorepo with many go modules.</description>
    </item>
    
    <item>
      <title>Adblocking in Turris Omnia</title>
      <link>https://vyskocil.org/blog/adblocking-in-turris-omnia/</link>
      <pubDate>Sat, 29 Dec 2018 22:39:57 +0200</pubDate>
      
      <guid>https://vyskocil.org/blog/adblocking-in-turris-omnia/</guid>
      <description>As a long time Firefox user I was horrified to use web browser with very limited blocking capabilities. However Samsung Browser is very handy tool for some sites. However the number of spam, scam, or porn pages and advertisements makes browsing there very unpleasant experience. Especially if your kids want to browse that way.
However I bought Turris Omnia especially because I wanted to hack around.
Source: turris.cz
Options As router provides Doman Name Service for all devices in local network, the most common way is to block DNS lookups for specified domains.</description>
    </item>
    
    <item>
      <title>Golang CORS and Testing</title>
      <link>https://vyskocil.org/blog/golang-cors-and-testing/</link>
      <pubDate>Tue, 18 Dec 2018 19:27:15 +0200</pubDate>
      
      <guid>https://vyskocil.org/blog/golang-cors-and-testing/</guid>
      <description>Working on a web project spread in more domains brings you to Cross-Origin Resource Sharing. Browsers use it to if it code from one origin can call HTTP methods placed elsewhere. Responses must contain specific headers, like Access-Control-Allow-Origin, which must match requesting Origin of the site issuing the call. More information about CORS can be found at html5rocks.
CORS look like simple thing to develop. Just add a few HTTP headers for regular methods.</description>
    </item>
    
    <item>
      <title>Go 111 Modules Monorepo and Shared Code</title>
      <link>https://vyskocil.org/blog/go-111-modules-monorepo-and-shared-code/</link>
      <pubDate>Fri, 09 Nov 2018 19:19:40 +0200</pubDate>
      
      <guid>https://vyskocil.org/blog/go-111-modules-monorepo-and-shared-code/</guid>
      <description>I recently joined company as a Python developer. However it turns out there is bigger need to evolve their code written in golang (and PHP and Javascript). I am not an expert in go, so it took me a while to figure things out. However I love to learn new things and to solve new puzzles (the real ones, there is nothing more boring to solve artificial ones for me)</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://vyskocil.org/projects/</link>
      <pubDate>Mon, 29 Oct 2018 15:06:47 +0100</pubDate>
      
      <guid>https://vyskocil.org/projects/</guid>
      <description>Some nice things I did in the past
 42ity: open source monitoring for DataCenters (team leader, founder, one of architects) qrget: easy to use privacy oriented file sharing Kinkip: JS Helper for Piknik game openSUSE/osc  ZeroMQ See https://github.com/zeromq
  (https://github.com/zeromq)[Graphviz support](https://github.com/zeromq/zproto/blob/master/src/zproto_dot.gsl) generating state machine diagrams for client and server.
  Added API model generator for zproto_codec_c and zproto_codec_c_v1.
  Added methods loading and saving zproto generated messages as ZPL.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://vyskocil.org/about/</link>
      <pubDate>Wed, 24 Oct 2018 22:01:48 +0200</pubDate>
      
      <guid>https://vyskocil.org/about/</guid>
      <description> Michal Vyskocil is a software developer, father, former manager, Linux and Open Source contributor and user. Opensource contributor to ZeroMQ and openSUSE projects. Former technical lead of 42ITY. Now working as independent consultant (backend, frontend)
 See my
 LinkedIn profile https://www.linkedin.com/in/michalvyskocil/ GitHub account: https://github.com/vyskocilm Twitter account: http://twitter.com/vyskocilm  </description>
    </item>
    
    <item>
      <title>Limiting Your Gorutines</title>
      <link>https://vyskocil.org/blog/limiting-your-gorutines/</link>
      <pubDate>Wed, 10 Oct 2018 19:11:24 +0200</pubDate>
      
      <guid>https://vyskocil.org/blog/limiting-your-gorutines/</guid>
      <description>Limiting your goroutines How to properly implement goroutine pool in golang with input and output channel(s). Text expects knowledge about golang and about Go Concurency. That means I am not going to explain what goroutine, channel or defer actually are.
Intro Gorutines are some kind of lightweight threads managed by userspace golang runtime. They save memory and context switches. Therefor it is possible to spawn literally Millions! of them. However as BenPar^W Voltaire said</description>
    </item>
    
  </channel>
</rss>